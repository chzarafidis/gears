Τεχνικές Προδιαγραφές για την Ανάπτυξη Κώδικα "Line Following"

1. Γενικές Αρχές & Συμβατότητα

Στόχος: Η παραγωγή προγράμματος python ή EV3 Micropython v2 που εκτελείται χωρίς αλλαγές τόσο στο φυσικό ρομπότ EV3 όσο και στον προσομοιωτή GearsBot. 

Ορισμός Συναρτήσεων ανά API: Δεν επιτρέπεται δυναμική επιλογή API μέσω if ή try-except μπλοκ, ανάλογα με το περιβάλλον. 
Οι εισαγωγές βιβλιοθηκών (imports) πρέπει να γίνονται στην αρχή, μόνο από ένα API.
Προσοχή! Κάθε κώδικας γράφεται μόνο για ένα API (είτε ev3dev2 είτε pybricks). Δεν επιτρέπεται η δυναμική επιλογή API στο ίδιο αρχείο. Οι εισαγωγές των βασικών βιβλιοθηκών, ενός και μόνο API, γίνονται στην αρχή του κώδικα. Στο API pybricks (from pybricks.hubs import EV3Brick, from pybricks.ev3devices import Motor, ColorSensor)

Ανίχνευση Περιβάλλοντος για Μηνύματα/Ειδικές Περιπτώσεις: Η sys.version_info θα χρησιμοποιείται αποκλειστικά για την προσαρμογή μηνυμάτων στην κονσόλα και (αν χρειάζεται) για ειδικές λειτουργίες όπως η ανάγνωση στάθμης μπαταρίας, όχι για την επιλογή ποιο API θα χρησιμοποιηθεί για τους κινητήρες/αισθητήρες.

Μεταγραφή:
Ο κώδικας αυτός θα πρέπει να μπορεί με τις λιγότερες το δυνατόν αλλαγές να μπορεί να μεταγραφεί από τη μία υλοποίηση στην άλλη ev3dev2 σε pybricks και το αντίστροφο.

Shebang Line: Η πρώτη γραμμή κάθε αρχείου κώδικα πρέπει να είναι η κατάλληλη shebang line για το περιβάλλον στο οποίο απευθύνεται:
Για σενάρια ev3dev2: #!/usr/bin/env python3
Για σενάρια pybricks EV3-micropython v2: #!/usr/bin/env pybricks-micropython

Ανίχνευση Περιβάλλοντος & Δυναμική Παραμετροποίηση: Απαγορεύεται ρητά η χρήση της sys.version_info.major και sys.version_info.minor.  Ο κώδικας πρέπει να περιλαμβάνει μηχανισμό που ανιχνεύει αυτόματα το περιβάλλον εκτέλεσης. Η διάκριση γίνεται βάσει της έκδοσης Python, η οποία ελέγχεται αποκλειστικά μέσω των στοιχείων sys.version_info[0] (κύρια έκδοση) και sys.version_info[1] (δευτερεύουσα έκδοση):
GearsBot Simulator: Python 3.7 (Στην προσομοίωση Gearsbot δεν μπορεί να ανιχνευτεί αν τρέχει κώδικας ev3dev2 ή pybricks. Είναι ενεργά ταυτόχρονα και τα δύο API)
Φυσικό Ρομπότ (ev3dev2): Python 3.5
Φυσικό Ρομπότ (pybricks EV3-micropython v2): MicroPython (αναγνωρίζεται ως Python 3.4) Αυτή η ανίχνευση είναι κρίσιμη για τη δυναμική παραμετροποίηση του αλγορίθμου, επιτρέποντας την προσαρμογή του στις διαφορετικές συνθήκες. Βάσει της ανίχνευσης, ορίζονται οι παρακάτω παράμετροι:

POWER_MIN = 0 (Ανεξάρτητα από το αν τρέχει σε φυσικό ρομπότ ή Simulation).
Αν χρησιμοποιείται η Λογική Pivot Turn POWER_MIN = 20 (Ανεξάρτητα από το αν τρέχει σε φυσικό ρομπότ ή Simulation)

Για τον Προσομοιωτή (IN_SIMULATOR is True):
REFLECTION_BLACK = 0
REFLECTION_WHITE = 100
POWER_TARGET = 30
POWER_MAX = 40

Για το Φυσικό Ρομπότ (IN_SIMULATOR is False):
REFLECTION_BLACK = 10
REFLECTION_WHITE = 70
Οι τιμές POWER_* πρέπει επίσης να οριστούν, συνήθως υψηλότερες για να υπερνικηθούν οι τριβές (POWER_TARGET = 40, POWER_MAX = 50).

Γλώσσα & Μορφοποίηση:
Όλα τα μηνύματα που εκτυπώνονται (print()) πρέπει να είναι στα Αγγλικά για την αποφυγή σφαλμάτων UnicodeEncodeError.
Απαγορεύεται η χρήση "f-strings". Η μορφοποίηση κειμένου γίνεται αποκλειστικά με τη μέθοδο .format().

Κωδικοποίηση Αρχείου: Απαγορεύεται η χρήση της δήλωσης κωδικοποίησης # -*- coding: utf-8 -*- στην αρχή των αρχείων, καθώς το περιβάλλον ev3dev2 με Python 3.5 δεν υποστηρίζει UTF-8.

Γενικοί Περιορισμοί:
Μη Υποστηριζόμενες Κλάσεις: Απαγορεύεται ρητά (αυστηρά) για όλες τις υλοποιήσεις και περιβάλλοντα (συμπεριλαμβανομένου του Pybricks EV3-micropython v2) η χρήση ή αρχικοποίηση μη υποστηριζόμενων κλάσεων (από Gearsbot, ev3dev2, pybricks v2), όπως η display, screen, Stopwatch. Αντί της stopwatch να γίνεται χρήση της time. Να MHN χρησιμοποιείται όρισμα στην motor.stop().

2. Διάταξη Υλικού & Λογική Παρακολούθησης

Κινητήρες:
Αριστερός: Port A
Δεξιός: Port B
Αισθητήρες Χρώματος:
Ένας (1) Αισθητήρας: Συνδέεται στην Port 1. Το ρομπότ προγραμματίζεται ώστε να ακολουθεί το δεξί όριο της μαύρης γραμμής.
Δύο (2) Αισθητήρες: Ο αριστερός στην Port 1 και ο δεξιός στην Port 2. Τοποθετούνται εκατέρωθεν της γραμμής ("αγκάλιασμα" / straddling).
Τρεις (3) Αισθητήρες: Ο αριστερός στην Port 1, ο δεξιός στην Port 2 και ο κεντρικός στην Port 3. Τοποθετούνται ώστε να ανιχνεύουν το αριστερό όριο, το δεξί όριο και το κέντρο της γραμμής αντίστοιχα.

3. Μέθοδοι Ελέγχου & Φυσικοί Περιορισμοί

Μέθοδοι Κίνησης:
ev3dev2: Χρήση της motor.on(speed=...) για έλεγχο με ποσοστό ισχύος.
pybricks EV3-micropython v2 (pybricks): Χρήση της motor.dc(duty_cycle=...) για έλεγχο με ποσοστό ισχύος.

Διαχείριση "Νεκρής Ζώνης" (Dead Zone): Οι φυσικοί κινητήρες παρουσιάζουν μια "νεκρή ζώνη" (dead zone), όπου τιμές ισχύος κάτω από ένα κατώφλι δεν παράγουν κίνηση (για την κίνηση προς τα εμπρός αλλά και προς τα πίσω). Ο κώδικας πρέπει να λαμβάνει υπόψη αυτόν τον φυσικό περιορισμό, διασφαλίζοντας ότι οι ελάχιστες τιμές ισχύος που χρησιμοποιούνται (π.χ., POWER_MIN) είναι επαρκώς υψηλές για να υπερνικήσουν τις στατικές τριβές στο φυσικό ρομπότ.

4. Αλγοριθμική Λογική & Στρατηγικές

Επιλογή Μήκους Διαδρομής: Ο κώδικας πρέπει να δέχεται παραμέτρους από τη γραμμή εντολών για την προσαρμογή της απόστασης. Η διαχείριση των παραμέτρων πρέπει να γίνεται απλά, μέσω του ελέγχου len(sys.argv) και της ανάγνωσης του sys.argv[1], και όχι με τη χρήση πιο σύνθετων βιβλιοθηκών όπως η argparse. Να μπορεί να τρέχει ο κώδικας χωρίς ορίσματα. Αν υπάρχει όρισμα (παράμετρος),  οι προκαθορισμένες αποστάσεις είναι σύμφωνα με την τιμή της πρώτης παραμέτρου:
smooth (ή καμία παράμετρος): 200 cm
sharp: 520 cm

Τερματισμός Διαδρομής: Η ολοκλήρωση της διαδρομής βασίζεται στη μέτρηση της απόστασης που έχει διανυθεί. Ο αλγόριθμος, χρησιμοποιώντας τη διάμετρο του τροχού, η οποία ορίζεται ως 5.6 cm (56 mm) στη μεταβλητή WHEEL_DIAMETER_CM, μετατρέπει την απόσταση-στόχο σε εκατοστά σε έναν αντίστοιχο αριθμό μοιρών περιστροφής του κινητήρα (target_degrees). Ο κύριος βρόχος ελέγχου (while loop) εκτελείται συνεχώς μέχρι η τρέχουσα γωνία του κινητήρα να φτάσει ή να ξεπεράσει αυτόν τον στόχο.

Υπολογισμός Ορίου (Threshold): Η τιμή-κατώφλι (THRESHOLD ή TARGET_VALUE) που χρησιμοποιείται για τη λήψη αποφάσεων πρέπει να υπολογίζεται δυναμικά. Αυτό επιτυγχάνεται με τη χρήση δύο μεταβλητών, REFLECTION_BLACK και REFLECTION_WHITE, οι οποίες ορίζονται ως σταθερές στην αρχή του κώδικα. Για την επίτευξη της βέλτιστης απόδοσης, ενδέχεται να απαιτούνται διαφορετικές τιμές για το φυσικό ρομπότ και τον προσομοιωτή, οι οποίες πρέπει να ρυθμίζονται χειροκίνητα. Το κατώφλι υπολογίζεται ως ο μέσος όρος αυτών των δύο τιμών.

Περιορισμός Ταχύτητας (Clamping): Όλες οι υλοποιήσεις πρέπει να περιλαμβάνουν μηχανισμό φραγής (clamping) για τις τελικές τιμές ταχύτητας των κινητήρων. Οι τιμές πρέπει να περιορίζονται εντός ενός έγκυρου εύρους POWER_MAX για την κίνηση εμπρός και -POWER_MIN για την όπισθεν.

Λογική Pivot Turn: Η στρατηγική της επιτόπιας περιστροφής για την αντιμετώπιση μεγάλων σφαλμάτων.  Εφαρμόζεται (να γραφτεί ο κώδικας όταν ζητείται) για την αντιμετώπιση διαδρομών με απότομη αλλαγή κατεύθυνσης ή μεγάλης καμπυλότητας. 

Ελεγκτής Πολλαπλών Ζωνών (Multi-Tier): Ο αλγόριθμος συνδυάζει δύο ζώνες:
Ζώνη Μικρού Σφάλματος: Χρησιμοποιείται ένας συνεχής αλγόριθμος ελέγχου (π.χ., P ή PID) για ομαλές διορθώσεις.
Ζώνη Υψηλού Σφάλματος: Ενεργοποιείται η στρατηγική pivot turn για ταχεία επαναφορά. Εφαρμόζεται μόνο αν αυτό ζητηθεί.

Χειρισμός Σφάλματος (error):
1 Αισθητήρας: error = TARGET_VALUE - reflection. Θετικό σφάλμα (ανίχνευση μαύρου) σημαίνει απόκλιση αριστερά και απαιτεί στροφή δεξιά (left_speed = POWER_TARGET + correction).
2 Αισθητήρες: error = reflection_left - reflection_right. Θετικό σφάλμα σημαίνει απόκλιση αριστερά και απαιτεί στροφή δεξιά (left_speed = POWER_TARGET + correction).
3 Αισθητήρες: Ο έλεγχος βασίζεται σε διακριτές καταστάσεις (π.χ., "μόνο ο κεντρικός βλέπει μαύρο"). Η λογική είναι:
on_center_only: Ευθεία.
on_right: Στροφή δεξιά.
on_left: Στροφή αριστερά.
else: Κίνηση προς τα πίσω.

5. Πληροφορίες Εξόδου (Console Output). Εφαρμόζεται μόνο αν αυτό ζητηθεί.

Ο κώδικας πρέπει να εκτυπώνει τις παρακάτω πληροφορίες στην κονσόλα:
Έναρξη Εκτέλεσης:
Έκδοση Python (Python version: ...).
Περιβάλλον Εκτέλεσης (Running in: GearsBot Simulator or Running on: EV3 Brick). Τι τιμές των βασικών παραμέτρων (REFLECTION_BLACK,
REFLECTION_WHITE, POWER_TARGET, POWER_MAX, POWER_MIN, KP). Αν ο εκλεκτής είναι PID (KI, KD). Καθώς και ότι σχετίζεται με το Pivot Turn (PIVOT_ERROR_THRESHOLD).
Έναρξη Αποστολής:
Μήνυμα έναρξης (--- Mission Start (...) ---).
Τύπος Διαδρομής και Απόσταση (Path Type: {}. Distance: {} cm).
Λήξη Αποστολής:
Μήνυμα ολοκλήρωσης (--- Mission Complete ---).
Συνολικός Χρόνος (Total time: X.X seconds.).
Διαχείριση Σφαλμάτων:
Μήνυμα σφάλματος (!!! An error occurred !!!).
Εκτύπωση του αντικειμένου της εξαίρεσης (Exception object).
